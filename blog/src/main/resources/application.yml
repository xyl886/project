server:
  port: 8800
  servlet:
    # 应用的访问路径
    context-path: /shiyi
spring:
  servlet:
    multipart:
      max-file-size: 50MB
      max-request-size: 50MB
  application:
    name: shiyiblog
  datasource:
    url: jdbc:mysql://localhost:3306/blog_new?characterEncoding=UTF-8&useUnicode=true&useSSL=false&serverTimezone=Asia/Shanghai&tinyInt1isBit=false
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: root
    password: root
    type: com.alibaba.druid.pool.DruidDataSource
    # 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时
    initial-size: 10
    # 最大连接池连接数量，最大活跃连接数
    max-active: 150
    # 最小连接池连接数量，最小空闲数量
    min-idle: 10
    # 配置获取连接等待超时的时间
    max-wait: 5000
    # 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。
    pool-prepared-statements: false
    # 指定每个连接上PSCache的大小
    # max-pool-prepared-statement-per-connection-size: 20
    # 和上面的等价
    # max-open-prepared-statements:
    # 指定检测连接sql，如果是null，会影响testWhileIdle、testOnBorrow、testOnReturn失效，如果底层代码use-ping-method是true，默认使用ping
    validation-query: SELECT 1
    validation-query-timeout: 500
    # 申请连接时会使用validationQuery检测连接是否有效，true会降低性能，如果是true，并且检测到连接已关闭，会获取其它的可用的连接
    test-on-borrow: false
    # 归还连接时会使用validationQuery检测连接是否有效，true会降低性能，如果是true，并且检测到连接已关闭，会获取其它的可用的连接，放回数据库线程池
    test-on-return: false
    # 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果此连接空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
    test-while-idle: true
    # 1)配合testWhileIdle=true时使用，如果当前jdbc使用间隔大于timeBetweenEvictionRunsMillis配置的空闲连接过期时间，执行validationQuery检测连接是否有效。
    # 数据库会主动超时并断开连接，因此建议timeBetweenEvictionRunsMillis小于数据库的连接主动断开时间（如mysql的wait_timeout和interactive_timeout）
    # 2)配置间隔多久才进行一次检测，Destroy线程检测需要关闭的空闲连接的时间，单位是毫秒
    time-between-eviction-runs-millis: 60000
    # 配置一个连接在池中最小生存的时间，单位是毫秒
    min-evictable-idle-time-millis: 30000
    # max-evictable-idle-time-millis:
    # 属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有： 监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall
    # 配置多个英文逗号分隔
    filters: stat,wall,log4j
    # 通过connectProperties属性来打开mergeSql功能；记录慢SQL
    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
  elasticsearch:
    rest:
      uris: localhost:9200
  redis:
    host: 127.0.0.1
    port: 6379
    timeout: 3000
    password: root

#==============================IP限流次数和时间配置==============================
IpLimit:
  #请求次数
  count: 5
  #请求时间
  time: 10

#==============================线程池配置==============================
task:
  executor:
    core_pool_size: 10
    max_pool_size: 200
    queue_capacity: 1200
    keep_alive_seconds: 60

#==============================Sa-Token配置==============================
sa-token:
  # token名称 (同时也是cookie名称)
  token-name: Authorization
  # token有效期，单位s 默认30天, -1代表永不过期
  timeout: 3600
  # token临时有效期 (指定时间内无操作就视为token过期) 单位: 秒
  activity-timeout: -1
  # 是否允许同一账号并发登录 (为true时允许一起登录, 为false时新登录挤掉旧登录)
  is-concurrent: true
  # 在多人登录同一账号时，是否共用一个token (为true时所有登录共用一个token, 为false时每次登录新建一个token)
  is-share: false
  # token风格
  token-style: uuid
  # 是否输出操作日志
  is-log: false

#==============================mybatis-plus配置==============================
mybatis-plus:
  mapper-locations: classpath:/mapper/*Mapper.xml
  #实体扫描，多个package用逗号或者分号分隔
  typeAliasesPackage: com.shiyi.entity
  global-config:
    # 数据库相关配置
    db-config:
      #主键类型  AUTO:"数据库ID自增", INPUT:"用户输入ID",ID_WORKER:"全局唯一ID (数字类型唯一ID)", UUID:"全局唯一ID UUID";
      id-type: AUTO
      #字段策略 IGNORED:"忽略判断",NOT_NULL:"非 NULL 判断"),NOT_EMPTY:"非空判断"
      field-strategy: not_empty
      #驼峰下划线转换
      column-underline: true
      db-type: mysql
    #刷新mapper 调试神器
    refresh: true
  # 原生配置
  configuration:
    map-underscore-to-camel-case: true
    cache-enabled: false
  logging:
    level: warn

#==============================knife4j配置=======================================
knife4j:
  # 开启增强配置
  enable: true
  basic:
    enable: false
    # Basic认证用户名
    username: admin
    # Basic认证密码
    password:

#============================第三方登录配置信息===================================
qq:
  app-id:
  check-token-url: https://graph.qq.com/oauth2.0/me?access_token={access_token}
  user-info-url: https://graph.qq.com/user/get_user_info?openid={openid}&access_token={access_token}&oauth_consumer_key={oauth_consumer_key}
weibo:
  app-id:
  app-secret:
  grant-type: authorization_code
  redirect-url: http://www.shiyit.com/callback/weibo
  access-token-url: https://api.weibo.com/oauth2/access_token
  user-info-url: https://api.weibo.com/2/users/show.json?uid={uid}&access_token={access_token}
gitee:
  app-id:
  app-secret:
  grant-type: authorization_code
  redirect-url: http://www.shiyit.com/callback/gitee
  access-token-url: https://gitee.com/oauth/token
  user-info-url: https://gitee.com/api/v5/user?access_token={access_token}
baidu:
  url:
file:
  upload-folder: /usr/local/blog/file/
